# Generated by Django 3.1.12 on 2021-06-25 03:06

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AMDLineVideoChipset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_chipset', models.CharField(max_length=100, verbose_name='Линейка продуктов')),
            ],
            options={
                'verbose_name': 'Линейка чипсетов',
                'verbose_name_plural': 'Линейки чипсетов',
                'ordering': ['line_chipset'],
            },
        ),
        migrations.CreateModel(
            name='AMDProcessorChipsetName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_chipset', models.CharField(max_length=100, verbose_name='Наименование чипсета процессора')),
            ],
            options={
                'verbose_name': 'Наименование чипсента процессора',
                'verbose_name_plural': 'Наименования чипсетов процессоров',
            },
        ),
        migrations.CreateModel(
            name='AMDProcessorSocket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('socket_name', models.CharField(max_length=100, verbose_name='Тип сокета процесора')),
            ],
            options={
                'verbose_name': 'Сокет',
                'verbose_name_plural': 'Сокеты',
            },
        ),
        migrations.CreateModel(
            name='AMDVideoChipset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_chipset', models.CharField(max_length=100, verbose_name='Наименование чипсета')),
            ],
            options={
                'verbose_name': 'Наименование',
                'verbose_name_plural': 'Наименования',
                'ordering': ['name_chipset'],
            },
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(db_index=True, max_length=250, verbose_name='Тип устройства')),
            ],
            options={
                'verbose_name': 'Устройства',
                'verbose_name_plural': 'Устройство',
                'unique_together': {('full_name',)},
            },
        ),
        migrations.CreateModel(
            name='AMDProcessor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=150, unique=True, verbose_name='Полное наименование процессора')),
                ('abbreviated_name', models.CharField(help_text='Сокращённое наименование процессора для отображения', max_length=65, verbose_name='Наименование процессора')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Описание товара')),
                ('price', models.FloatField(verbose_name='Цена')),
                ('amount', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(1, 'Минимально допустимое количество: 1 единица товара')], verbose_name='Количество единиц товара')),
                ('cores', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1, 'Минимально допустимое значение: 1')], verbose_name='Количество ядер в процессоре')),
                ('series', models.CharField(choices=[('1000', 'AMD Ryzen™ 1000'), ('1000Radeon', 'AMD Ryzen™ 1000 with Radeon Graphic'), ('2000', 'AMD Ryzen™ 2000'), ('2000Radeon', 'AMD Ryzen™ 2000 with Radeon Graphic'), ('3000', 'AMD Ryzen™ 3000'), ('3000Radeon', 'AMD Ryzen™ 3000 with Radeon Graphic'), ('5000', 'AMD Ryzen™ 5000'), ('5000Radeon', 'AMD Ryzen™ 5000 with Radeon Graphic')], default='1000', max_length=50, verbose_name='Серия')),
                ('date_added', models.DateField(auto_now_add=True, db_index=True, verbose_name='Дата добавления')),
                ('processor_chipset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main_shop.amdprocessorchipsetname', verbose_name='Чипсет процессора')),
                ('processor_socket', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main_shop.amdprocessorsocket', verbose_name='Тип сокета процессора')),
                ('product_setion_amd_processor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main_shop.producttype', verbose_name='Выберите тип устройства: ')),
            ],
        ),
        migrations.CreateModel(
            name='AMDVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=250, unique=True, verbose_name='Полное наименование видеокарты')),
                ('abbreviated_name', models.CharField(help_text='Сокращённое наименование для выводе в поиске', max_length=65, verbose_name='Наименование товара')),
                ('price', models.FloatField(verbose_name='Цена')),
                ('amount', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(1, 'Минимально допустимое количество: 1 единица товара')], verbose_name='Количество единиц товара')),
                ('vram', models.CharField(choices=[('4.0GB', '4.0 GB'), ('6.0GB', '6.0 GB'), ('8.0GB', '8.0 GB'), ('11.0GB', '11.0 GB')], default='4.0GB', max_length=100, verbose_name='Объем памяти')),
                ('vram_type', models.CharField(choices=[('2', 'GDD2'), ('3', 'GDDR3'), ('4', 'GDDR4'), ('5', 'GDDR5'), ('5X', 'GDDR5X'), ('6', 'GDDR6'), ('6X', 'GDDR6X')], default='3', max_length=100, verbose_name='Тип памяти')),
                ('directx', models.CharField(choices=[('V9', 'DirectX Version 9'), ('V10', 'DirectX Version 10'), ('V11', 'DirectX Version 11'), ('V12', 'DirectX Version 12')], default='V12', max_length=25, verbose_name='Версия DirectX')),
                ('sli', models.BooleanField(verbose_name='Наличие SLI совместимости')),
                ('video_partners', models.CharField(choices=[('asus', 'ASUS'), ('msi', 'MSI'), ('gig', 'Gigabyte'), ('sapphire', 'Sapphire'), ('xfx', 'XFX')], max_length=100, verbose_name='Производитель видеокарты')),
                ('date_added', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата добавления')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Описание товара')),
                ('line_chipset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='main_shop.amdlinevideochipset', verbose_name='Линейка продуктов')),
                ('name_chipset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='main_shop.amdvideochipset', verbose_name='Чипсет')),
                ('product_section_amd_videcard', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main_shop.producttype', verbose_name='Выберите тип продукта: ')),
            ],
            options={
                'verbose_name': 'Видеокарта AMD',
                'verbose_name_plural': 'Видеокарты AMD',
                'ordering': ['video_partners'],
                'unique_together': {('full_name', 'abbreviated_name')},
            },
        ),
    ]
